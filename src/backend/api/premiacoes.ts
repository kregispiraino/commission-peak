// Backend API - Premia√ß√µes
// Rotas para integra√ß√£o futura com banco de dados

export interface Premiacao {
  id?: string;
  descricao: string;
  foto_url?: string;
  empresa_id: string;
  equipe_id?: string | null;
  id_ascora?: string;
  ativo?: boolean;
}

// ROTA GET: Listar premia√ß√µes
export async function listarPremiacoes(idAscora: string): Promise<Premiacao[]> {
  console.log('üîµ Backend - GET Listar premia√ß√µes para id_ascora:', idAscora);
  await new Promise(resolve => setTimeout(resolve, 300));
  
  // TODO: Implementar l√≥gica de busca no banco de dados
  
  return [];
}

// ROTA: Cadastrar nova premia√ß√£o
export async function cadastrarPremiacao(premiacao: Premiacao): Promise<{ success: boolean; data?: Premiacao; error?: string }> {
  console.log('üîµ Backend - Cadastrar premia√ß√£o:', premiacao);
  
  // TODO: Implementar l√≥gica de inser√ß√£o no banco de dados
  // TODO: Implementar upload da foto para storage
  
  return {
    success: true,
    data: { ...premiacao, id: 'temp-id-' + Date.now() }
  };
}

// ROTA: Editar premia√ß√£o existente
export async function editarPremiacao(id: string, premiacao: Partial<Premiacao>): Promise<{ success: boolean; data?: Premiacao; error?: string }> {
  console.log('üîµ Backend - Editar premia√ß√£o:', { id, premiacao });
  
  // TODO: Implementar l√≥gica de atualiza√ß√£o no banco de dados
  // TODO: Se houver nova foto, fazer upload e atualizar URL
  
  return {
    success: true,
    data: { ...premiacao, id } as Premiacao
  };
}

// ROTA: Excluir premia√ß√£o
export async function excluirPremiacao(id: string): Promise<{ success: boolean; error?: string }> {
  console.log('üîµ Backend - Excluir premia√ß√£o com ID:', id);
  
  // TODO: Implementar l√≥gica de exclus√£o (soft delete) no banco de dados
  // TODO: Remover foto do storage se necess√°rio
  
  return {
    success: true
  };
}

// ROTA: Upload de foto da premia√ß√£o
export async function uploadFotoPremiacao(file: File): Promise<{ success: boolean; url?: string; error?: string }> {
  console.log('üîµ Backend - Upload de foto da premia√ß√£o:', file.name);
  
  // TODO: Implementar l√≥gica de upload para storage (Supabase Storage)
  // Por enquanto, retorna uma URL simulada
  
  return {
    success: true,
    url: `https://placeholder.co/400x300?text=${encodeURIComponent(file.name)}`
  };
}
