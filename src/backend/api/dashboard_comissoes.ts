// ============================================
// üí∞ ROTAS DO BACKEND - DASHBOARD DE COMISS√ïES
// ============================================
// Este arquivo cont√©m todas as rotas para buscar dados da p√°gina de Comiss√µes
// Separado do cadastro de comiss√µes para evitar confus√£o
// Cada fun√ß√£o est√° documentada com t√≠tulo e descri√ß√£o para facilitar a implementa√ß√£o futura

// ============================================
// üìä TIPOS DE DADOS
// ============================================

export interface VendasHoje {
  total: number;           // Total de vendas do dia
  quantidade: number;      // N√∫mero de vendas realizadas
  ticketMedio: number;     // Valor m√©dio por venda
}

export interface ComissaoResumo {
  comissao: number;        // Valor da comiss√£o
  vendasTotais: number;    // Total de vendas
  percentual: number;      // Percentual de comiss√£o (ex: 5%)
}

export interface RankingInfo {
  posicao: number;         // Posi√ß√£o do vendedor no ranking
  totalVendedores: number; // Total de vendedores na competi√ß√£o
}

export interface EmpresaComissao {
  id: string;
  name: string;
  commission: number;      // Comiss√£o da empresa
  sales: number;           // Vendas da empresa
}

export interface EquipeComissao {
  id: string;
  name: string;
  commission: number;      // Comiss√£o da equipe
  sales: number;           // Vendas da equipe
}

export interface HistoricoMes {
  month: string;           // Nome do m√™s (ex: "Abril")
  commission: number;      // Comiss√£o do m√™s
  sales: number;           // Vendas do m√™s
}

export interface DetalheVenda {
  id: string;
  description: string;     // Descri√ß√£o da venda
  value: number;           // Valor da comiss√£o desta venda
  date: string;            // Data da venda (formato ISO)
}

export interface ApiResponse<T = any> {
  success: boolean;
  data?: T;
  error?: string;
}

// ============================================
// üìÖ ROTA 1: BUSCAR VENDAS DE HOJE
// ============================================
// T√çTULO: Buscar Vendas do Dia Atual
// DESCRI√á√ÉO: Retorna estat√≠sticas das vendas realizadas hoje incluindo:
//            - Total vendido no dia
//            - Quantidade de vendas
//            - Ticket m√©dio (valor m√©dio por venda)
// QUANDO USAR: Ao carregar o card "Vendas Hoje" no Dashboard de Comiss√µes
export const buscarVendasHoje = async (): Promise<ApiResponse<VendasHoje>> => {
  console.log('üîµ Backend - üìÖ Buscando vendas de hoje');
  
  // TODO: Implementar l√≥gica para buscar do banco de dados
  // - Buscar todas as vendas do dia atual (data = hoje)
  // - Somar valores totais das vendas
  // - Contar n√∫mero de vendas
  // - Calcular ticket m√©dio (total / quantidade)
  
  await new Promise(resolve => setTimeout(resolve, 500));
  
  return {
    success: true,
    data: {
      total: 28500,
      quantidade: 12,
      ticketMedio: 2375,
    }
  };
};

// ============================================
// üíµ ROTA 2: BUSCAR RESUMO DE COMISS√ÉO
// ============================================
// T√çTULO: Buscar Resumo de Comiss√£o do Per√≠odo
// DESCRI√á√ÉO: Retorna o resumo da comiss√£o do vendedor no per√≠odo filtrado:
//            - Valor total da comiss√£o
//            - Total de vendas realizadas
//            - Percentual de comiss√£o aplicado
// PAR√ÇMETROS:
//   - empresaIds: Array de IDs de empresas para filtrar (opcional)
//   - equipeIds: Array de IDs de equipes para filtrar (opcional)
// QUANDO USAR: Ao carregar o card de "Comiss√£o" no Dashboard
export const buscarResumoComissao = async (
  empresaIds?: string[],
  equipeIds?: string[]
): Promise<ApiResponse<ComissaoResumo>> => {
  console.log('üîµ Backend - üíµ Buscando resumo de comiss√£o', { empresaIds, equipeIds });
  
  // TODO: Implementar l√≥gica para buscar do banco de dados
  // - Filtrar vendas por empresas/equipes selecionadas
  // - Buscar percentual de comiss√£o do vendedor
  // - Calcular comiss√£o total baseado nas vendas
  // - Somar vendas totais do per√≠odo
  
  await new Promise(resolve => setTimeout(resolve, 500));
  
  return {
    success: true,
    data: {
      comissao: 25250,
      vendasTotais: 505000,
      percentual: 5,
    }
  };
};

// ============================================
// üèÜ ROTA 3: BUSCAR POSI√á√ÉO NO RANKING
// ============================================
// T√çTULO: Buscar Posi√ß√£o no Ranking de Comiss√µes
// DESCRI√á√ÉO: Retorna a posi√ß√£o do vendedor no ranking de comiss√µes:
//            - Posi√ß√£o atual do vendedor
//            - Total de vendedores no ranking
// QUANDO USAR: Ao carregar o card de "Ranking" no Dashboard
export const buscarPosicaoRanking = async (): Promise<ApiResponse<RankingInfo>> => {
  console.log('üîµ Backend - üèÜ Buscando posi√ß√£o no ranking');
  
  // TODO: Implementar l√≥gica para buscar do banco de dados
  // - Buscar vendedor logado
  // - Calcular ranking baseado em comiss√µes ou vendas
  // - Contar total de vendedores ativos
  // - Determinar posi√ß√£o do vendedor
  
  await new Promise(resolve => setTimeout(resolve, 500));
  
  return {
    success: true,
    data: {
      posicao: 2,
      totalVendedores: 20,
    }
  };
};

// ============================================
// üè¢ ROTA 4: LISTAR EMPRESAS COM COMISS√ïES
// ============================================
// T√çTULO: Listar Empresas com Dados de Comiss√£o
// DESCRI√á√ÉO: Retorna lista de empresas com suas comiss√µes e vendas
//            Usado no filtro de empresas e no card de comiss√µes por empresa
// QUANDO USAR: Ao carregar filtros do Dashboard de Comiss√µes (usu√°rios master)
export const listarEmpresasComissoes = async (): Promise<ApiResponse<EmpresaComissao[]>> => {
  console.log('üîµ Backend - üè¢ Listando empresas com comiss√µes');
  
  // TODO: Implementar l√≥gica para buscar do banco de dados
  // - Buscar todas as empresas ativas
  // - Calcular comiss√£o total de cada empresa no per√≠odo
  // - Calcular vendas totais de cada empresa
  
  await new Promise(resolve => setTimeout(resolve, 500));
  
  return {
    success: true,
    data: [
      { id: 'company1', name: 'TechCorp', commission: 12000, sales: 240000 },
      { id: 'company2', name: 'InnovaSoft', commission: 8250, sales: 165000 },
      { id: 'company3', name: 'DigitalMax', commission: 5000, sales: 100000 },
    ]
  };
};

// ============================================
// üë• ROTA 5: LISTAR EQUIPES COM COMISS√ïES
// ============================================
// T√çTULO: Listar Equipes com Dados de Comiss√£o
// DESCRI√á√ÉO: Retorna lista de equipes com suas comiss√µes e vendas
//            Usado no filtro de equipes do Dashboard
// QUANDO USAR: Ao carregar filtros do Dashboard de Comiss√µes
export const listarEquipesComissoes = async (): Promise<ApiResponse<EquipeComissao[]>> => {
  console.log('üîµ Backend - üë• Listando equipes com comiss√µes');
  
  // TODO: Implementar l√≥gica para buscar do banco de dados
  // - Buscar todas as equipes ativas
  // - Calcular comiss√£o total de cada equipe no per√≠odo
  // - Calcular vendas totais de cada equipe
  
  await new Promise(resolve => setTimeout(resolve, 500));
  
  return {
    success: true,
    data: [
      { id: 'team1', name: 'Equipe A', commission: 10000, sales: 200000 },
      { id: 'team2', name: 'Equipe B', commission: 7500, sales: 150000 },
      { id: 'team3', name: 'Equipe C', commission: 4750, sales: 95000 },
    ]
  };
};

// ============================================
// üìä ROTA 6: BUSCAR HIST√ìRICO DE COMISS√ïES
// ============================================
// T√çTULO: Buscar Hist√≥rico de Comiss√µes (√öltimos 3 Meses)
// DESCRI√á√ÉO: Retorna o hist√≥rico das comiss√µes dos √∫ltimos 3 meses incluindo:
//            - Nome do m√™s
//            - Valor da comiss√£o do m√™s
//            - Total de vendas do m√™s
// QUANDO USAR: Ao carregar o card "Hist√≥rico de Comiss√µes"
export const buscarHistoricoComissoes = async (): Promise<ApiResponse<HistoricoMes[]>> => {
  console.log('üîµ Backend - üìä Buscando hist√≥rico de comiss√µes');
  
  // TODO: Implementar l√≥gica para buscar do banco de dados
  // - Obter os √∫ltimos 3 meses completos
  // - Para cada m√™s, buscar:
  //   * Total de comiss√µes do vendedor
  //   * Total de vendas do m√™s
  // - Ordenar do mais recente para o mais antigo
  
  await new Promise(resolve => setTimeout(resolve, 500));
  
  return {
    success: true,
    data: [
      { month: 'Abril', commission: 22500, sales: 450000 },
      { month: 'Mar√ßo', commission: 19800, sales: 396000 },
      { month: 'Fevereiro', commission: 21200, sales: 424000 },
    ]
  };
};

// ============================================
// üìã ROTA 7: BUSCAR DETALHES DE VENDAS POR M√äS
// ============================================
// T√çTULO: Buscar Detalhes das Vendas de um M√™s Espec√≠fico
// DESCRI√á√ÉO: Retorna lista detalhada de todas as vendas de um m√™s incluindo:
//            - Descri√ß√£o da venda
//            - Valor da comiss√£o
//            - Data da venda
// PAR√ÇMETROS:
//   - mes: Nome do m√™s (ex: "Abril", "Mar√ßo")
// QUANDO USAR: Ao expandir um m√™s no hist√≥rico de comiss√µes
export const buscarDetalhesVendasMes = async (
  mes: string
): Promise<ApiResponse<DetalheVenda[]>> => {
  console.log('üîµ Backend - üìã Buscando detalhes de vendas do m√™s:', mes);
  
  // TODO: Implementar l√≥gica para buscar do banco de dados
  // - Identificar o m√™s/ano solicitado
  // - Buscar todas as vendas do vendedor naquele m√™s
  // - Para cada venda, retornar:
  //   * Descri√ß√£o da venda (produto/servi√ßo + cliente)
  //   * Valor da comiss√£o calculada
  //   * Data da venda
  // - Ordenar por data (mais recente primeiro)
  
  await new Promise(resolve => setTimeout(resolve, 500));
  
  // Mock data baseado no m√™s
  const mockData: Record<string, DetalheVenda[]> = {
    'Abril': [
      { id: '1', description: 'Venda Sistema CRM - Empresa ABC', value: 8500, date: '2024-04-28' },
      { id: '2', description: 'Licen√ßas Software - Tech Solutions', value: 6200, date: '2024-04-25' },
      { id: '3', description: 'Consultoria ERP - InnovaCorp', value: 4500, date: '2024-04-22' },
      { id: '4', description: 'Manuten√ß√£o Anual - Digital Plus', value: 3300, date: '2024-04-15' },
    ],
    'Mar√ßo': [
      { id: '5', description: 'Venda Sistema ERP - MegaCorp', value: 7800, date: '2024-03-30' },
      { id: '6', description: 'Licen√ßas Office - StartupXYZ', value: 5500, date: '2024-03-28' },
      { id: '7', description: 'Consultoria BI - DataTech', value: 3900, date: '2024-03-20' },
      { id: '8', description: 'Suporte Premium - CloudSys', value: 2600, date: '2024-03-12' },
    ],
    'Fevereiro': [
      { id: '9', description: 'Venda Plataforma E-commerce', value: 9200, date: '2024-02-28' },
      { id: '10', description: 'Licen√ßas Antiv√≠rus - SecureIT', value: 6000, date: '2024-02-25' },
      { id: '11', description: 'Implanta√ß√£o Sistema - LogisCorp', value: 4100, date: '2024-02-18' },
      { id: '12', description: 'Treinamento Equipe - DevTeam', value: 2900, date: '2024-02-10' },
    ],
  };
  
  return {
    success: true,
    data: mockData[mes] || []
  };
};

// ============================================
// üí∞ ROTA 8: CALCULAR TOTAL DO TRIMESTRE
// ============================================
// T√çTULO: Calcular Total de Comiss√µes do Trimestre
// DESCRI√á√ÉO: Calcula o valor total de comiss√µes dos √∫ltimos 3 meses
// QUANDO USAR: Ao exibir o card de "Total do Trimestre"
export const calcularTotalTrimestre = async (): Promise<ApiResponse<{
  total: number;
  meses: string[];
}>> => {
  console.log('üîµ Backend - üí∞ Calculando total do trimestre');
  
  // TODO: Implementar l√≥gica para buscar do banco de dados
  // - Buscar comiss√µes dos √∫ltimos 3 meses completos
  // - Somar todas as comiss√µes do per√≠odo
  // - Retornar nomes dos meses inclu√≠dos
  
  await new Promise(resolve => setTimeout(resolve, 500));
  
  return {
    success: true,
    data: {
      total: 63500, // 22500 + 19800 + 21200
      meses: ['Fevereiro', 'Mar√ßo', 'Abril']
    }
  };
};

// ============================================
// üîÑ ROTA 9: CALCULAR COMISS√ïES FILTRADAS
// ============================================
// T√çTULO: Calcular Comiss√µes com Filtros Aplicados
// DESCRI√á√ÉO: Calcula comiss√µes baseado nos filtros de empresas e equipes selecionados
// PAR√ÇMETROS:
//   - empresaIds: Array de IDs de empresas selecionadas
//   - equipeIds: Array de IDs de equipes selecionadas
// QUANDO USAR: Ao mudar filtros de empresa/equipe no Dashboard
export const calcularComissoesFiltradas = async (
  empresaIds: string[],
  equipeIds: string[]
): Promise<ApiResponse<{
  comissaoTotal: number;
  vendasTotais: number;
}>> => {
  console.log('üîµ Backend - üîÑ Calculando comiss√µes filtradas', { empresaIds, equipeIds });
  
  // TODO: Implementar l√≥gica para buscar do banco de dados
  // - Filtrar vendedores por empresa e equipe selecionadas
  // - Buscar vendas desses vendedores no per√≠odo
  // - Calcular comiss√µes totais
  // - Somar vendas totais
  
  await new Promise(resolve => setTimeout(resolve, 500));
  
  return {
    success: true,
    data: {
      comissaoTotal: 25250,
      vendasTotais: 505000,
    }
  };
};

// ============================================
// üë§ ROTA 10: BUSCAR N√çVEL DE ACESSO DO USU√ÅRIO
// ============================================
// T√çTULO: Buscar N√≠vel de Acesso para Filtros
// DESCRI√á√ÉO: Retorna o n√≠vel de acesso do usu√°rio logado
//            (master, gerente, vendedor)
//            Usado para mostrar/ocultar filtros no Dashboard de Comiss√µes
// QUANDO USAR: Ao carregar o Dashboard para verificar permiss√µes
export const buscarNivelAcessoComissoes = async (): Promise<ApiResponse<{
  role: 'master' | 'gerente' | 'vendedor';
}>> => {
  console.log('üîµ Backend - üë§ Buscando n√≠vel de acesso do usu√°rio');
  
  // TODO: Implementar l√≥gica para buscar do banco de dados
  // - Buscar usu√°rio logado
  // - Retornar seu n√≠vel de acesso (campo 'acesso' na tabela profiles)
  
  await new Promise(resolve => setTimeout(resolve, 500));
  
  return {
    success: true,
    data: {
      role: 'master'
    }
  };
};
